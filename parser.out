Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     expr -> produit
Rule 7     expr -> expr + produit
Rule 8     produit -> facteur
Rule 9     produit -> produit * facteur
Rule 10    facteur -> ENTIER
Rule 11    facteur -> ( expr )

Unused terminals:

    SUPERIEUR
    INFERIEUR_OU_EGAL
    CONDITION_SINON
    CONDITION_SI
    EGAL_EGAL
    SUPERIEUR_OU_EGAL
    RETOURNER
    INFERIEUR
    DIFFERENT
    IDENTIFIANT
    LIRE
    BOOLEEN
    AFFECTATION
    PORTE_OU
    PORTE_NON
    PORTE_ET
    CONDITION_SINON_SI
    TANTQUE

Terminals, with rules where they appear:

(                    : 5 11
)                    : 5 11
*                    : 9
+                    : 7
;                    : 5
AFFECTATION          : 
BOOLEEN              : 
CONDITION_SI         : 
CONDITION_SINON      : 
CONDITION_SINON_SI   : 
DIFFERENT            : 
ECRIRE               : 5
EGAL_EGAL            : 
ENTIER               : 10
IDENTIFIANT          : 
INFERIEUR            : 
INFERIEUR_OU_EGAL    : 
LIRE                 : 
PORTE_ET             : 
PORTE_NON            : 
PORTE_OU             : 
RETOURNER            : 
SUPERIEUR            : 
SUPERIEUR_OU_EGAL    : 
TANTQUE              : 
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 7 11
facteur              : 8 9
instruction          : 2 3
listeInstructions    : 1 2
produit              : 6 7 9
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (6) expr -> . produit
    (7) expr -> . expr + produit
    (8) produit -> . facteur
    (9) produit -> . produit * facteur
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    ENTIER          shift and go to state 12
    (               shift and go to state 8

    expr                           shift and go to state 9
    produit                        shift and go to state 10
    facteur                        shift and go to state 11

state 8

    (11) facteur -> ( . expr )
    (6) expr -> . produit
    (7) expr -> . expr + produit
    (8) produit -> . facteur
    (9) produit -> . produit * facteur
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    ENTIER          shift and go to state 12
    (               shift and go to state 8

    expr                           shift and go to state 13
    produit                        shift and go to state 10
    facteur                        shift and go to state 11

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (7) expr -> expr . + produit
    )               shift and go to state 14
    +               shift and go to state 15


state 10

    (6) expr -> produit .
    (9) produit -> produit . * facteur
    )               reduce using rule 6 (expr -> produit .)
    +               reduce using rule 6 (expr -> produit .)
    *               shift and go to state 16


state 11

    (8) produit -> facteur .
    *               reduce using rule 8 (produit -> facteur .)
    )               reduce using rule 8 (produit -> facteur .)
    +               reduce using rule 8 (produit -> facteur .)


state 12

    (10) facteur -> ENTIER .
    *               reduce using rule 10 (facteur -> ENTIER .)
    )               reduce using rule 10 (facteur -> ENTIER .)
    +               reduce using rule 10 (facteur -> ENTIER .)


state 13

    (11) facteur -> ( expr . )
    (7) expr -> expr . + produit
    )               shift and go to state 17
    +               shift and go to state 15


state 14

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 18


state 15

    (7) expr -> expr + . produit
    (8) produit -> . facteur
    (9) produit -> . produit * facteur
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    ENTIER          shift and go to state 12
    (               shift and go to state 8

    produit                        shift and go to state 19
    facteur                        shift and go to state 11

state 16

    (9) produit -> produit * . facteur
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    ENTIER          shift and go to state 12
    (               shift and go to state 8

    facteur                        shift and go to state 20

state 17

    (11) facteur -> ( expr ) .
    *               reduce using rule 11 (facteur -> ( expr ) .)
    )               reduce using rule 11 (facteur -> ( expr ) .)
    +               reduce using rule 11 (facteur -> ( expr ) .)


state 18

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 19

    (7) expr -> expr + produit .
    (9) produit -> produit . * facteur
    )               reduce using rule 7 (expr -> expr + produit .)
    +               reduce using rule 7 (expr -> expr + produit .)
    *               shift and go to state 16


state 20

    (9) produit -> produit * facteur .
    *               reduce using rule 9 (produit -> produit * facteur .)
    )               reduce using rule 9 (produit -> produit * facteur .)
    +               reduce using rule 9 (produit -> produit * facteur .)
