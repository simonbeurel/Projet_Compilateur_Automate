Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     expr -> booleen
Rule 7     booleen -> somme
Rule 8     booleen -> BOOLEEN
Rule 9     somme -> - facteur
Rule 10    somme -> expr + produit
Rule 11    somme -> expr - produit
Rule 12    somme -> produit
Rule 13    produit -> produit % facteur
Rule 14    produit -> produit / facteur
Rule 15    produit -> produit * facteur
Rule 16    produit -> facteur
Rule 17    facteur -> ( expr )
Rule 18    facteur -> ENTIER
Rule 19    facteur -> LIRE ( )
Rule 20    facteur -> IDENTIFIANT ( )
Rule 21    facteur -> IDENTIFIANT ( argument )
Rule 22    facteur -> variable
Rule 23    variable -> IDENTIFIANT
Rule 24    argument -> expr
Rule 25    argument -> expr , argument

Unused terminals:

    INFERIEUR_OU_EGAL
    CONDITION_SI
    RETOURNER
    PORTE_OU
    AFFECTATION
    CONDITION_SINON_SI
    DIFFERENT
    PORTE_NON
    TANTQUE
    SUPERIEUR_OU_EGAL
    CONDITION_SINON
    SUPERIEUR
    EGAL_EGAL
    PORTE_ET
    INFERIEUR

Terminals, with rules where they appear:

%                    : 13
(                    : 5 17 19 20 21
)                    : 5 17 19 20 21
*                    : 15
+                    : 10
,                    : 25
-                    : 9 11
/                    : 14
;                    : 5
AFFECTATION          : 
BOOLEEN              : 8
CONDITION_SI         : 
CONDITION_SINON      : 
CONDITION_SINON_SI   : 
DIFFERENT            : 
ECRIRE               : 5
EGAL_EGAL            : 
ENTIER               : 18
IDENTIFIANT          : 20 21 23
INFERIEUR            : 
INFERIEUR_OU_EGAL    : 
LIRE                 : 19
PORTE_ET             : 
PORTE_NON            : 
PORTE_OU             : 
RETOURNER            : 
SUPERIEUR            : 
SUPERIEUR_OU_EGAL    : 
TANTQUE              : 
error                : 

Nonterminals, with rules where they appear:

argument             : 21 25
booleen              : 6
ecrire               : 4
expr                 : 5 10 11 17 24 25
facteur              : 9 13 14 15 16
instruction          : 2 3
listeInstructions    : 1 2
produit              : 10 11 12 13 14 15
prog                 : 0
somme                : 7
variable             : 22


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (6) expr -> . booleen
    (7) booleen -> . somme
    (8) booleen -> . BOOLEEN
    (9) somme -> . - facteur
    (10) somme -> . expr + produit
    (11) somme -> . expr - produit
    (12) somme -> . produit
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (16) produit -> . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    BOOLEEN         shift and go to state 12
    -               shift and go to state 13
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    expr                           shift and go to state 9
    booleen                        shift and go to state 10
    somme                          shift and go to state 11
    facteur                        shift and go to state 14
    produit                        shift and go to state 15
    variable                       shift and go to state 19

state 8

    (17) facteur -> ( . expr )
    (6) expr -> . booleen
    (7) booleen -> . somme
    (8) booleen -> . BOOLEEN
    (9) somme -> . - facteur
    (10) somme -> . expr + produit
    (11) somme -> . expr - produit
    (12) somme -> . produit
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (16) produit -> . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    BOOLEEN         shift and go to state 12
    -               shift and go to state 13
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    expr                           shift and go to state 20
    booleen                        shift and go to state 10
    somme                          shift and go to state 11
    facteur                        shift and go to state 14
    produit                        shift and go to state 15
    variable                       shift and go to state 19

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (10) somme -> expr . + produit
    (11) somme -> expr . - produit
    )               shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23


state 10

    (6) expr -> booleen .
    )               reduce using rule 6 (expr -> booleen .)
    +               reduce using rule 6 (expr -> booleen .)
    -               reduce using rule 6 (expr -> booleen .)
    ,               reduce using rule 6 (expr -> booleen .)


state 11

    (7) booleen -> somme .
    )               reduce using rule 7 (booleen -> somme .)
    +               reduce using rule 7 (booleen -> somme .)
    -               reduce using rule 7 (booleen -> somme .)
    ,               reduce using rule 7 (booleen -> somme .)


state 12

    (8) booleen -> BOOLEEN .
    )               reduce using rule 8 (booleen -> BOOLEEN .)
    +               reduce using rule 8 (booleen -> BOOLEEN .)
    -               reduce using rule 8 (booleen -> BOOLEEN .)
    ,               reduce using rule 8 (booleen -> BOOLEEN .)


state 13

    (9) somme -> - . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    facteur                        shift and go to state 24
    variable                       shift and go to state 19

state 14

    (16) produit -> facteur .
    %               reduce using rule 16 (produit -> facteur .)
    /               reduce using rule 16 (produit -> facteur .)
    *               reduce using rule 16 (produit -> facteur .)
    )               reduce using rule 16 (produit -> facteur .)
    +               reduce using rule 16 (produit -> facteur .)
    -               reduce using rule 16 (produit -> facteur .)
    ,               reduce using rule 16 (produit -> facteur .)


state 15

    (12) somme -> produit .
    (13) produit -> produit . % facteur
    (14) produit -> produit . / facteur
    (15) produit -> produit . * facteur
    )               reduce using rule 12 (somme -> produit .)
    +               reduce using rule 12 (somme -> produit .)
    -               reduce using rule 12 (somme -> produit .)
    ,               reduce using rule 12 (somme -> produit .)
    %               shift and go to state 25
    /               shift and go to state 26
    *               shift and go to state 27


state 16

    (18) facteur -> ENTIER .
    %               reduce using rule 18 (facteur -> ENTIER .)
    /               reduce using rule 18 (facteur -> ENTIER .)
    *               reduce using rule 18 (facteur -> ENTIER .)
    )               reduce using rule 18 (facteur -> ENTIER .)
    +               reduce using rule 18 (facteur -> ENTIER .)
    -               reduce using rule 18 (facteur -> ENTIER .)
    ,               reduce using rule 18 (facteur -> ENTIER .)


state 17

    (19) facteur -> LIRE . ( )
    (               shift and go to state 28


state 18

    (20) facteur -> IDENTIFIANT . ( )
    (21) facteur -> IDENTIFIANT . ( argument )
    (23) variable -> IDENTIFIANT .
    (               shift and go to state 29
    %               reduce using rule 23 (variable -> IDENTIFIANT .)
    /               reduce using rule 23 (variable -> IDENTIFIANT .)
    *               reduce using rule 23 (variable -> IDENTIFIANT .)
    )               reduce using rule 23 (variable -> IDENTIFIANT .)
    +               reduce using rule 23 (variable -> IDENTIFIANT .)
    -               reduce using rule 23 (variable -> IDENTIFIANT .)
    ,               reduce using rule 23 (variable -> IDENTIFIANT .)


state 19

    (22) facteur -> variable .
    %               reduce using rule 22 (facteur -> variable .)
    /               reduce using rule 22 (facteur -> variable .)
    *               reduce using rule 22 (facteur -> variable .)
    )               reduce using rule 22 (facteur -> variable .)
    +               reduce using rule 22 (facteur -> variable .)
    -               reduce using rule 22 (facteur -> variable .)
    ,               reduce using rule 22 (facteur -> variable .)


state 20

    (17) facteur -> ( expr . )
    (10) somme -> expr . + produit
    (11) somme -> expr . - produit
    )               shift and go to state 30
    +               shift and go to state 22
    -               shift and go to state 23


state 21

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 31


state 22

    (10) somme -> expr + . produit
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (16) produit -> . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    produit                        shift and go to state 32
    facteur                        shift and go to state 14
    variable                       shift and go to state 19

state 23

    (11) somme -> expr - . produit
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (16) produit -> . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    produit                        shift and go to state 33
    facteur                        shift and go to state 14
    variable                       shift and go to state 19

state 24

    (9) somme -> - facteur .
    )               reduce using rule 9 (somme -> - facteur .)
    +               reduce using rule 9 (somme -> - facteur .)
    -               reduce using rule 9 (somme -> - facteur .)
    ,               reduce using rule 9 (somme -> - facteur .)


state 25

    (13) produit -> produit % . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    facteur                        shift and go to state 34
    variable                       shift and go to state 19

state 26

    (14) produit -> produit / . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    facteur                        shift and go to state 35
    variable                       shift and go to state 19

state 27

    (15) produit -> produit * . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    facteur                        shift and go to state 36
    variable                       shift and go to state 19

state 28

    (19) facteur -> LIRE ( . )
    )               shift and go to state 37


state 29

    (20) facteur -> IDENTIFIANT ( . )
    (21) facteur -> IDENTIFIANT ( . argument )
    (24) argument -> . expr
    (25) argument -> . expr , argument
    (6) expr -> . booleen
    (7) booleen -> . somme
    (8) booleen -> . BOOLEEN
    (9) somme -> . - facteur
    (10) somme -> . expr + produit
    (11) somme -> . expr - produit
    (12) somme -> . produit
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (16) produit -> . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    )               shift and go to state 38
    BOOLEEN         shift and go to state 12
    -               shift and go to state 13
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    argument                       shift and go to state 39
    expr                           shift and go to state 40
    booleen                        shift and go to state 10
    somme                          shift and go to state 11
    facteur                        shift and go to state 14
    produit                        shift and go to state 15
    variable                       shift and go to state 19

state 30

    (17) facteur -> ( expr ) .
    %               reduce using rule 17 (facteur -> ( expr ) .)
    /               reduce using rule 17 (facteur -> ( expr ) .)
    *               reduce using rule 17 (facteur -> ( expr ) .)
    )               reduce using rule 17 (facteur -> ( expr ) .)
    +               reduce using rule 17 (facteur -> ( expr ) .)
    -               reduce using rule 17 (facteur -> ( expr ) .)
    ,               reduce using rule 17 (facteur -> ( expr ) .)


state 31

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 32

    (10) somme -> expr + produit .
    (13) produit -> produit . % facteur
    (14) produit -> produit . / facteur
    (15) produit -> produit . * facteur
    )               reduce using rule 10 (somme -> expr + produit .)
    +               reduce using rule 10 (somme -> expr + produit .)
    -               reduce using rule 10 (somme -> expr + produit .)
    ,               reduce using rule 10 (somme -> expr + produit .)
    %               shift and go to state 25
    /               shift and go to state 26
    *               shift and go to state 27


state 33

    (11) somme -> expr - produit .
    (13) produit -> produit . % facteur
    (14) produit -> produit . / facteur
    (15) produit -> produit . * facteur
    )               reduce using rule 11 (somme -> expr - produit .)
    +               reduce using rule 11 (somme -> expr - produit .)
    -               reduce using rule 11 (somme -> expr - produit .)
    ,               reduce using rule 11 (somme -> expr - produit .)
    %               shift and go to state 25
    /               shift and go to state 26
    *               shift and go to state 27


state 34

    (13) produit -> produit % facteur .
    %               reduce using rule 13 (produit -> produit % facteur .)
    /               reduce using rule 13 (produit -> produit % facteur .)
    *               reduce using rule 13 (produit -> produit % facteur .)
    )               reduce using rule 13 (produit -> produit % facteur .)
    +               reduce using rule 13 (produit -> produit % facteur .)
    -               reduce using rule 13 (produit -> produit % facteur .)
    ,               reduce using rule 13 (produit -> produit % facteur .)


state 35

    (14) produit -> produit / facteur .
    %               reduce using rule 14 (produit -> produit / facteur .)
    /               reduce using rule 14 (produit -> produit / facteur .)
    *               reduce using rule 14 (produit -> produit / facteur .)
    )               reduce using rule 14 (produit -> produit / facteur .)
    +               reduce using rule 14 (produit -> produit / facteur .)
    -               reduce using rule 14 (produit -> produit / facteur .)
    ,               reduce using rule 14 (produit -> produit / facteur .)


state 36

    (15) produit -> produit * facteur .
    %               reduce using rule 15 (produit -> produit * facteur .)
    /               reduce using rule 15 (produit -> produit * facteur .)
    *               reduce using rule 15 (produit -> produit * facteur .)
    )               reduce using rule 15 (produit -> produit * facteur .)
    +               reduce using rule 15 (produit -> produit * facteur .)
    -               reduce using rule 15 (produit -> produit * facteur .)
    ,               reduce using rule 15 (produit -> produit * facteur .)


state 37

    (19) facteur -> LIRE ( ) .
    %               reduce using rule 19 (facteur -> LIRE ( ) .)
    /               reduce using rule 19 (facteur -> LIRE ( ) .)
    *               reduce using rule 19 (facteur -> LIRE ( ) .)
    )               reduce using rule 19 (facteur -> LIRE ( ) .)
    +               reduce using rule 19 (facteur -> LIRE ( ) .)
    -               reduce using rule 19 (facteur -> LIRE ( ) .)
    ,               reduce using rule 19 (facteur -> LIRE ( ) .)


state 38

    (20) facteur -> IDENTIFIANT ( ) .
    %               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)
    /               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)
    *               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)
    )               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)
    +               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)
    -               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)
    ,               reduce using rule 20 (facteur -> IDENTIFIANT ( ) .)


state 39

    (21) facteur -> IDENTIFIANT ( argument . )
    )               shift and go to state 41


state 40

    (24) argument -> expr .
    (25) argument -> expr . , argument
    (10) somme -> expr . + produit
    (11) somme -> expr . - produit
    )               reduce using rule 24 (argument -> expr .)
    ,               shift and go to state 42
    +               shift and go to state 22
    -               shift and go to state 23


state 41

    (21) facteur -> IDENTIFIANT ( argument ) .
    %               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)
    /               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)
    *               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)
    )               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)
    +               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)
    -               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)
    ,               reduce using rule 21 (facteur -> IDENTIFIANT ( argument ) .)


state 42

    (25) argument -> expr , . argument
    (24) argument -> . expr
    (25) argument -> . expr , argument
    (6) expr -> . booleen
    (7) booleen -> . somme
    (8) booleen -> . BOOLEEN
    (9) somme -> . - facteur
    (10) somme -> . expr + produit
    (11) somme -> . expr - produit
    (12) somme -> . produit
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (16) produit -> . facteur
    (17) facteur -> . ( expr )
    (18) facteur -> . ENTIER
    (19) facteur -> . LIRE ( )
    (20) facteur -> . IDENTIFIANT ( )
    (21) facteur -> . IDENTIFIANT ( argument )
    (22) facteur -> . variable
    (23) variable -> . IDENTIFIANT
    BOOLEEN         shift and go to state 12
    -               shift and go to state 13
    (               shift and go to state 8
    ENTIER          shift and go to state 16
    LIRE            shift and go to state 17
    IDENTIFIANT     shift and go to state 18

    expr                           shift and go to state 40
    argument                       shift and go to state 43
    booleen                        shift and go to state 10
    somme                          shift and go to state 11
    facteur                        shift and go to state 14
    produit                        shift and go to state 15
    variable                       shift and go to state 19

state 43

    (25) argument -> expr , argument .
    )               reduce using rule 25 (argument -> expr , argument .)
